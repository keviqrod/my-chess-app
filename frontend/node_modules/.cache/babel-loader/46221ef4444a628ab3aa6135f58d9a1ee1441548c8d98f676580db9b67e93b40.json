{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paint\\\\Desktop\\\\Chess Game\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Chess } from 'chess.js'; // Import Chess as a named export.\nimport Chessboard from './components/Chessboard';\nimport StockfishController from './StockfishController';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Initialize a new Chess game.\n  const [game, setGame] = useState(new Chess());\n  const [position, setPosition] = useState(game.fen());\n  const [message, setMessage] = useState('');\n  // Mode: 'human' for human vs. human, 'ai' for human vs. computer.\n  const [mode, setMode] = useState('ai');\n  // AI difficulty (skill level); easy = 5, medium = 10, hard = 16.\n  const [difficulty, setDifficulty] = useState(10);\n  // Flag to indicate that it's the computer's turn.\n  const [isComputerTurn, setIsComputerTurn] = useState(false);\n\n  // Create a single StockfishController instance using useRef.\n  const stockfishRef = useRef(null);\n  if (!stockfishRef.current) {\n    stockfishRef.current = new StockfishController();\n  }\n  const stockfish = stockfishRef.current;\n\n  // Handler for when a human moves a piece.\n  const handleDrop = useCallback((sourceSquare, targetSquare) => {\n    const piece = game.get(sourceSquare);\n    if (!piece) {\n      console.error(\"No piece at\", sourceSquare);\n      return false;\n    }\n    // In AI mode, allow only white moves.\n    if (mode === 'ai' && piece.color !== 'w') {\n      console.error(\"It's not your turn (human plays white).\");\n      return false;\n    }\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q'\n    });\n    if (move === null) return false;\n    setPosition(game.fen());\n    setMessage('');\n    if (game.isGameOver()) {\n      if (game.isCheckmate()) {\n        setMessage(\"Checkmate! Game over.\");\n      } else if (game.isDraw()) {\n        setMessage(\"Draw! Game over.\");\n      } else {\n        setMessage(\"Game over.\");\n      }\n    } else if (mode === 'ai' && game.turn() === 'b') {\n      // After a human move in AI mode, trigger the computer move.\n      setIsComputerTurn(true);\n    }\n    return true;\n  }, [game, mode]);\n\n  // Effect to trigger the computer move.\n  useEffect(() => {\n    if (mode === 'ai' && isComputerTurn && game.turn() === 'b' && !game.isGameOver()) {\n      stockfish.getBestMove(game.fen(), {\n        skillLevel: difficulty,\n        movetime: 1000\n      }).then(bestMove => {\n        const from = bestMove.slice(0, 2);\n        const to = bestMove.slice(2, 4);\n        const aiMove = game.move({\n          from,\n          to,\n          promotion: 'q'\n        });\n        if (aiMove === null) {\n          setMessage(\"Computer attempted an invalid move.\");\n        } else {\n          setPosition(game.fen());\n        }\n        setIsComputerTurn(false);\n      }).catch(err => {\n        console.error(\"Stockfish error:\", err);\n        setIsComputerTurn(false);\n      });\n    }\n  }, [isComputerTurn, mode, game, stockfish, difficulty]);\n\n  // Function to start a new game.\n  const startNewGame = () => {\n    const newGame = new Chess();\n    setGame(newGame);\n    setPosition(newGame.fen());\n    setMessage('');\n    setIsComputerTurn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simple Chess App with AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Mode: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: mode,\n        onChange: e => setMode(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"human\",\n          children: \"Human vs. Human\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ai\",\n          children: \"Human vs. Computer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), mode === 'ai' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Difficulty: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: difficulty,\n        onChange: e => setDifficulty(parseInt(e.target.value, 10)),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 5,\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 10,\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 16,\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: position,\n      onDrop: handleDrop,\n      boardWidth: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startNewGame,\n      children: \"Start New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eXYG9RWE+fKjEjv9g4GrZtjCNM0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useRef","Chess","Chessboard","StockfishController","jsxDEV","_jsxDEV","App","_s","game","setGame","position","setPosition","fen","message","setMessage","mode","setMode","difficulty","setDifficulty","isComputerTurn","setIsComputerTurn","stockfishRef","current","stockfish","handleDrop","sourceSquare","targetSquare","piece","get","console","error","color","move","from","to","promotion","isGameOver","isCheckmate","isDraw","turn","getBestMove","skillLevel","movetime","then","bestMove","slice","aiMove","catch","err","startNewGame","newGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","value","onChange","e","target","parseInt","onDrop","boardWidth","onClick","_c","$RefreshReg$"],"sources":["C:/Users/paint/Desktop/Chess Game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Chess } from 'chess.js'; // Import Chess as a named export.\r\nimport Chessboard from './components/Chessboard';\r\nimport StockfishController from './StockfishController';\r\nimport './index.css';\r\n\r\nfunction App() {\r\n  // Initialize a new Chess game.\r\n  const [game, setGame] = useState(new Chess());\r\n  const [position, setPosition] = useState(game.fen());\r\n  const [message, setMessage] = useState('');\r\n  // Mode: 'human' for human vs. human, 'ai' for human vs. computer.\r\n  const [mode, setMode] = useState('ai');\r\n  // AI difficulty (skill level); easy = 5, medium = 10, hard = 16.\r\n  const [difficulty, setDifficulty] = useState(10);\r\n  // Flag to indicate that it's the computer's turn.\r\n  const [isComputerTurn, setIsComputerTurn] = useState(false);\r\n\r\n  // Create a single StockfishController instance using useRef.\r\n  const stockfishRef = useRef(null);\r\n  if (!stockfishRef.current) {\r\n    stockfishRef.current = new StockfishController();\r\n  }\r\n  const stockfish = stockfishRef.current;\r\n\r\n  // Handler for when a human moves a piece.\r\n  const handleDrop = useCallback((sourceSquare, targetSquare) => {\r\n    const piece = game.get(sourceSquare);\r\n    if (!piece) {\r\n      console.error(\"No piece at\", sourceSquare);\r\n      return false;\r\n    }\r\n    // In AI mode, allow only white moves.\r\n    if (mode === 'ai' && piece.color !== 'w') {\r\n      console.error(\"It's not your turn (human plays white).\");\r\n      return false;\r\n    }\r\n\r\n    const move = game.move({ from: sourceSquare, to: targetSquare, promotion: 'q' });\r\n    if (move === null) return false;\r\n\r\n    setPosition(game.fen());\r\n    setMessage('');\r\n\r\n    if (game.isGameOver()) {\r\n      if (game.isCheckmate()) {\r\n        setMessage(\"Checkmate! Game over.\");\r\n      } else if (game.isDraw()) {\r\n        setMessage(\"Draw! Game over.\");\r\n      } else {\r\n        setMessage(\"Game over.\");\r\n      }\r\n    } else if (mode === 'ai' && game.turn() === 'b') {\r\n      // After a human move in AI mode, trigger the computer move.\r\n      setIsComputerTurn(true);\r\n    }\r\n\r\n    return true;\r\n  }, [game, mode]);\r\n\r\n  // Effect to trigger the computer move.\r\n  useEffect(() => {\r\n    if (mode === 'ai' && isComputerTurn && game.turn() === 'b' && !game.isGameOver()) {\r\n      stockfish.getBestMove(game.fen(), { skillLevel: difficulty, movetime: 1000 })\r\n        .then(bestMove => {\r\n          const from = bestMove.slice(0, 2);\r\n          const to = bestMove.slice(2, 4);\r\n          const aiMove = game.move({ from, to, promotion: 'q' });\r\n          if (aiMove === null) {\r\n            setMessage(\"Computer attempted an invalid move.\");\r\n          } else {\r\n            setPosition(game.fen());\r\n          }\r\n          setIsComputerTurn(false);\r\n        })\r\n        .catch(err => {\r\n          console.error(\"Stockfish error:\", err);\r\n          setIsComputerTurn(false);\r\n        });\r\n    }\r\n  }, [isComputerTurn, mode, game, stockfish, difficulty]);\r\n\r\n  // Function to start a new game.\r\n  const startNewGame = () => {\r\n    const newGame = new Chess();\r\n    setGame(newGame);\r\n    setPosition(newGame.fen());\r\n    setMessage('');\r\n    setIsComputerTurn(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Simple Chess App with AI</h1>\r\n      \r\n      {/* Mode Selector */}\r\n      <div style={{ marginBottom: '1rem' }}>\r\n        <label>Mode: </label>\r\n        <select value={mode} onChange={(e) => setMode(e.target.value)}>\r\n          <option value=\"human\">Human vs. Human</option>\r\n          <option value=\"ai\">Human vs. Computer</option>\r\n        </select>\r\n      </div>\r\n      \r\n      {/* Difficulty Selector (visible in AI mode) */}\r\n      {mode === 'ai' && (\r\n        <div style={{ marginBottom: '1rem' }}>\r\n          <label>Difficulty: </label>\r\n          <select value={difficulty} onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}>\r\n            <option value={5}>Easy</option>\r\n            <option value={10}>Medium</option>\r\n            <option value={16}>Hard</option>\r\n          </select>\r\n        </div>\r\n      )}\r\n\r\n      {/* Render the Chessboard */}\r\n      <Chessboard position={position} onDrop={handleDrop} boardWidth={400} />\r\n\r\n      {message && <p>{message}</p>}\r\n      {game.isGameOver() && <button onClick={startNewGame}>Start New Game</button>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}