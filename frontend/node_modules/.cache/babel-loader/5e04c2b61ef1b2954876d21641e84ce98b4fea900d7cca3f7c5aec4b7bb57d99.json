{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paint\\\\Desktop\\\\Chess Game\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { Chess } from 'chess.js';\nimport Chessboard from './components/Chessboard';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Create a new chess game instance using chess.js\n  const [game, setGame] = useState(new Chess());\n  // The board position is stored as a FEN string; 'start' is a shortcut for the initial position.\n  const [position, setPosition] = useState(game.fen());\n  // Message to display notifications (like checkmate)\n  const [message, setMessage] = useState('');\n\n  // This function handles piece drops\n  const handleDrop = useCallback((sourceSquare, targetSquare) => {\n    // Try to make the move (always promote to queen for simplicity)\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q'\n    });\n\n    // If the move is illegal, cancel it.\n    if (move === null) return false;\n\n    // Update the board's FEN string so the chessboard re-renders.\n    setPosition(game.fen());\n\n    // Check if the game is over\n    if (game.game_over()) {\n      if (game.in_checkmate()) {\n        setMessage(\"Checkmate! You win!\");\n      } else if (game.in_draw()) {\n        setMessage(\"Draw! Game over.\");\n      } else {\n        setMessage(\"Game over.\");\n      }\n    } else {\n      // Clear any game over messages if the game is still in progress\n      setMessage('');\n    }\n    return true;\n  }, [game]);\n\n  // A helper function to start a new game\n  const startNewGame = () => {\n    const newGame = new Chess();\n    setGame(newGame);\n    setPosition(newGame.fen());\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simple Chess App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), game.game_over() && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startNewGame,\n      children: \"Start New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: position,\n      onDrop: handleDrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UBxV+imCYH+Pnlu3B811Duh4ovQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","Chess","Chessboard","jsxDEV","_jsxDEV","App","_s","game","setGame","position","setPosition","fen","message","setMessage","handleDrop","sourceSquare","targetSquare","move","from","to","promotion","game_over","in_checkmate","in_draw","startNewGame","newGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onDrop","_c","$RefreshReg$"],"sources":["C:/Users/paint/Desktop/Chess Game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { Chess } from 'chess.js';\r\nimport Chessboard from './components/Chessboard';\r\nimport './index.css';\r\n\r\nfunction App() {\r\n  // Create a new chess game instance using chess.js\r\n  const [game, setGame] = useState(new Chess());\r\n  // The board position is stored as a FEN string; 'start' is a shortcut for the initial position.\r\n  const [position, setPosition] = useState(game.fen());\r\n  // Message to display notifications (like checkmate)\r\n  const [message, setMessage] = useState('');\r\n\r\n  // This function handles piece drops\r\n  const handleDrop = useCallback((sourceSquare, targetSquare) => {\r\n    // Try to make the move (always promote to queen for simplicity)\r\n    const move = game.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: 'q'\r\n    });\r\n\r\n    // If the move is illegal, cancel it.\r\n    if (move === null) return false;\r\n\r\n    // Update the board's FEN string so the chessboard re-renders.\r\n    setPosition(game.fen());\r\n\r\n    // Check if the game is over\r\n    if (game.game_over()) {\r\n      if (game.in_checkmate()) {\r\n        setMessage(\"Checkmate! You win!\");\r\n      } else if (game.in_draw()) {\r\n        setMessage(\"Draw! Game over.\");\r\n      } else {\r\n        setMessage(\"Game over.\");\r\n      }\r\n    } else {\r\n      // Clear any game over messages if the game is still in progress\r\n      setMessage('');\r\n    }\r\n    \r\n    return true;\r\n  }, [game]);\r\n\r\n  // A helper function to start a new game\r\n  const startNewGame = () => {\r\n    const newGame = new Chess();\r\n    setGame(newGame);\r\n    setPosition(newGame.fen());\r\n    setMessage('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Simple Chess App</h1>\r\n      {/* Render a \"Start New Game\" button if the game is over */}\r\n      {game.game_over() && (\r\n        <button onClick={startNewGame}>Start New Game</button>\r\n      )}\r\n      {/* Render the chessboard with the current position and drop handler */}\r\n      <Chessboard position={position} onDrop={handleDrop} />\r\n      {/* Display a message if there is one */}\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAIE,KAAK,CAAC,CAAC,CAAC;EAC7C;EACA,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAACQ,IAAI,CAACI,GAAG,CAAC,CAAC,CAAC;EACpD;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMe,UAAU,GAAGd,WAAW,CAAC,CAACe,YAAY,EAAEC,YAAY,KAAK;IAC7D;IACA,MAAMC,IAAI,GAAGV,IAAI,CAACU,IAAI,CAAC;MACrBC,IAAI,EAAEH,YAAY;MAClBI,EAAE,EAAEH,YAAY;MAChBI,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF;IACA,IAAIH,IAAI,KAAK,IAAI,EAAE,OAAO,KAAK;;IAE/B;IACAP,WAAW,CAACH,IAAI,CAACI,GAAG,CAAC,CAAC,CAAC;;IAEvB;IACA,IAAIJ,IAAI,CAACc,SAAS,CAAC,CAAC,EAAE;MACpB,IAAId,IAAI,CAACe,YAAY,CAAC,CAAC,EAAE;QACvBT,UAAU,CAAC,qBAAqB,CAAC;MACnC,CAAC,MAAM,IAAIN,IAAI,CAACgB,OAAO,CAAC,CAAC,EAAE;QACzBV,UAAU,CAAC,kBAAkB,CAAC;MAChC,CAAC,MAAM;QACLA,UAAU,CAAC,YAAY,CAAC;MAC1B;IACF,CAAC,MAAM;MACL;MACAA,UAAU,CAAC,EAAE,CAAC;IAChB;IAEA,OAAO,IAAI;EACb,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMiB,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,OAAO,GAAG,IAAIxB,KAAK,CAAC,CAAC;IAC3BO,OAAO,CAACiB,OAAO,CAAC;IAChBf,WAAW,CAACe,OAAO,CAACd,GAAG,CAAC,CAAC,CAAC;IAC1BE,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAED,oBACET,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvB,OAAA;MAAAuB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAExBxB,IAAI,CAACc,SAAS,CAAC,CAAC,iBACfjB,OAAA;MAAQ4B,OAAO,EAAER,YAAa;MAAAG,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACtD,eAED3B,OAAA,CAACF,UAAU;MAACO,QAAQ,EAAEA,QAAS;MAACwB,MAAM,EAAEnB;IAAW;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAErDnB,OAAO,iBAAIR,OAAA;MAAAuB,QAAA,EAAIf;IAAO;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV;AAACzB,EAAA,CA7DQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA+DZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}