{"ast":null,"code":"// StockfishController.js\n\nclass StockfishController {\n  constructor() {\n    // Create a new Worker using the URL constructor so bundlers know how to load it.\n    this.worker = new Worker(new URL('./workers/stockfish.worker.js', import.meta.url));\n    this.callbacks = [];\n\n    // Listen for messages from Stockfish.\n    this.worker.onmessage = event => {\n      if (typeof event.data === 'string' && event.data.startsWith('bestmove')) {\n        const bestMove = event.data.split(' ')[1];\n        // Call all stored callbacks with the best move.\n        this.callbacks.forEach(cb => cb(bestMove));\n        this.callbacks = [];\n      }\n    };\n  }\n  sendCommand(cmd) {\n    this.worker.postMessage(cmd);\n  }\n  getBestMove(fen, options = {}) {\n    return new Promise((resolve, reject) => {\n      // Set the board position.\n      this.sendCommand(`position fen ${fen}`);\n      // Set the skill level if provided.\n      if (options.skillLevel !== undefined) {\n        this.sendCommand(`setoption name Skill Level value ${options.skillLevel}`);\n      }\n      // Start the search with the specified movetime (default 1000ms).\n      const movetime = options.movetime || 1000;\n      this.sendCommand(`go movetime ${movetime}`);\n\n      // Save the callback to resolve once bestmove is received.\n      this.callbacks.push(resolve);\n    });\n  }\n}\nexport default StockfishController;","map":{"version":3,"names":["StockfishController","constructor","worker","Worker","URL","import","meta","url","callbacks","onmessage","event","data","startsWith","bestMove","split","forEach","cb","sendCommand","cmd","postMessage","getBestMove","fen","options","Promise","resolve","reject","skillLevel","undefined","movetime","push"],"sources":["C:/Users/paint/Desktop/Chess Game/frontend/src/StockfishController.js"],"sourcesContent":["// StockfishController.js\r\n\r\nclass StockfishController {\r\n    constructor() {\r\n      // Create a new Worker using the URL constructor so bundlers know how to load it.\r\n      this.worker = new Worker(new URL('./workers/stockfish.worker.js', import.meta.url));\r\n      this.callbacks = [];\r\n  \r\n      // Listen for messages from Stockfish.\r\n      this.worker.onmessage = (event) => {\r\n        if (typeof event.data === 'string' && event.data.startsWith('bestmove')) {\r\n          const bestMove = event.data.split(' ')[1];\r\n          // Call all stored callbacks with the best move.\r\n          this.callbacks.forEach(cb => cb(bestMove));\r\n          this.callbacks = [];\r\n        }\r\n      };\r\n    }\r\n  \r\n    sendCommand(cmd) {\r\n      this.worker.postMessage(cmd);\r\n    }\r\n  \r\n    getBestMove(fen, options = {}) {\r\n      return new Promise((resolve, reject) => {\r\n        // Set the board position.\r\n        this.sendCommand(`position fen ${fen}`);\r\n        // Set the skill level if provided.\r\n        if (options.skillLevel !== undefined) {\r\n          this.sendCommand(`setoption name Skill Level value ${options.skillLevel}`);\r\n        }\r\n        // Start the search with the specified movetime (default 1000ms).\r\n        const movetime = options.movetime || 1000;\r\n        this.sendCommand(`go movetime ${movetime}`);\r\n  \r\n        // Save the callback to resolve once bestmove is received.\r\n        this.callbacks.push(resolve);\r\n      });\r\n    }\r\n  }\r\n  \r\n  export default StockfishController;\r\n  \r\n  \r\n  "],"mappings":"AAAA;;AAEA,MAAMA,mBAAmB,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACZ;IACA,IAAI,CAACC,MAAM,GAAG,IAAIC,MAAM,CAAC,IAAIC,GAAG,CAAC,+BAA+B,EAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC;IACnF,IAAI,CAACC,SAAS,GAAG,EAAE;;IAEnB;IACA,IAAI,CAACN,MAAM,CAACO,SAAS,GAAIC,KAAK,IAAK;MACjC,IAAI,OAAOA,KAAK,CAACC,IAAI,KAAK,QAAQ,IAAID,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;QACvE,MAAMC,QAAQ,GAAGH,KAAK,CAACC,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzC;QACA,IAAI,CAACN,SAAS,CAACO,OAAO,CAACC,EAAE,IAAIA,EAAE,CAACH,QAAQ,CAAC,CAAC;QAC1C,IAAI,CAACL,SAAS,GAAG,EAAE;MACrB;IACF,CAAC;EACH;EAEAS,WAAWA,CAACC,GAAG,EAAE;IACf,IAAI,CAAChB,MAAM,CAACiB,WAAW,CAACD,GAAG,CAAC;EAC9B;EAEAE,WAAWA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC7B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC;MACA,IAAI,CAACR,WAAW,CAAC,gBAAgBI,GAAG,EAAE,CAAC;MACvC;MACA,IAAIC,OAAO,CAACI,UAAU,KAAKC,SAAS,EAAE;QACpC,IAAI,CAACV,WAAW,CAAC,oCAAoCK,OAAO,CAACI,UAAU,EAAE,CAAC;MAC5E;MACA;MACA,MAAME,QAAQ,GAAGN,OAAO,CAACM,QAAQ,IAAI,IAAI;MACzC,IAAI,CAACX,WAAW,CAAC,eAAeW,QAAQ,EAAE,CAAC;;MAE3C;MACA,IAAI,CAACpB,SAAS,CAACqB,IAAI,CAACL,OAAO,CAAC;IAC9B,CAAC,CAAC;EACJ;AACF;AAEA,eAAexB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}