{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paint\\\\Desktop\\\\Chess Game\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Chess } from 'chess.js'; // Named export from chess.js\nimport Chessboard from './components/Chessboard';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Initialize a new chess game.\n  const [game, setGame] = useState(new Chess());\n  const [position, setPosition] = useState(game.fen());\n  const [message, setMessage] = useState('');\n  // Mode: \"human\" for human vs. human; \"ai\" for human vs. computer.\n  const [mode, setMode] = useState('ai');\n  // AI difficulty: easy (5), medium (10), hard (16).\n  const [difficulty, setDifficulty] = useState(10);\n  // Flag indicating if it's the computer's turn.\n  const [isComputerTurn, setIsComputerTurn] = useState(false);\n\n  // Handler for when a human moves a piece.\n  const handleDrop = useCallback((sourceSquare, targetSquare) => {\n    try {\n      const piece = game.get(sourceSquare);\n      if (!piece) {\n        setMessage(\"No piece at the selected square. Please try again.\");\n        return false;\n      }\n      // In AI mode, only allow human (White) moves.\n      if (mode === 'ai' && piece.color !== 'w') {\n        setMessage(\"It's not your turn. Please wait for the computer move.\");\n        return false;\n      }\n      const move = game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: 'q'\n      });\n      if (move === null) {\n        setMessage(\"Invalid move. Please try a different move.\");\n        return false;\n      }\n      // Clear any previous error messages.\n      setMessage('');\n      setPosition(game.fen());\n      if (game.isGameOver()) {\n        if (game.isCheckmate()) {\n          setMessage(\"Checkmate! Game over.\");\n        } else if (game.isDraw()) {\n          setMessage(\"Draw! Game over.\");\n        } else {\n          setMessage(\"Game over.\");\n        }\n      } else if (mode === 'ai' && game.turn() === 'b') {\n        setIsComputerTurn(true);\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Error in handleDrop:\", error);\n      setMessage(\"An error occurred while making your move. Please try again.\");\n      return false;\n    }\n  }, [game, mode]);\n\n  // Effect to trigger the computer's move by calling the backend API.\n  useEffect(() => {\n    if (mode === 'ai' && isComputerTurn && game.turn() === 'b' && !game.isGameOver()) {\n      // Map numeric difficulty to a string for the backend.\n      let difficultyStr = \"medium\";\n      if (difficulty === 5) difficultyStr = \"easy\";else if (difficulty === 10) difficultyStr = \"medium\";else if (difficulty === 16) difficultyStr = \"hard\";\n\n      // Use the full URL to ensure we hit the Flask backend on port 5000.\n      fetch(\"http://127.0.0.1:5000/api/get_move\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen(),\n          difficulty: difficultyStr\n        })\n      }).then(response => response.json()).then(data => {\n        if (data.status === 'success') {\n          const bestMove = data.move; // UCI notation, e.g., \"e7e5\"\n          const from = bestMove.slice(0, 2);\n          const to = bestMove.slice(2, 4);\n          const aiMove = game.move({\n            from,\n            to,\n            promotion: 'q'\n          });\n          if (aiMove === null) {\n            setMessage(\"Computer attempted an invalid move.\");\n          } else {\n            setPosition(game.fen());\n          }\n        } else {\n          setMessage(\"Error: \" + data.message);\n        }\n        setIsComputerTurn(false);\n      }).catch(err => {\n        console.error(\"API error:\", err);\n        setIsComputerTurn(false);\n      });\n    }\n  }, [isComputerTurn, mode, game, difficulty]);\n\n  // Function to start a new game.\n  const startNewGame = () => {\n    const newGame = new Chess();\n    setGame(newGame);\n    setPosition(newGame.fen());\n    setMessage('');\n    setIsComputerTurn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simple Chess App with AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Mode: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: mode,\n        onChange: e => setMode(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"human\",\n          children: \"Human vs. Human\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ai\",\n          children: \"Human vs. Computer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), mode === 'ai' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Difficulty: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: difficulty,\n        onChange: e => setDifficulty(parseInt(e.target.value, 10)),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 5,\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 10,\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 16,\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: position,\n      onDrop: handleDrop,\n      boardWidth: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startNewGame,\n      children: \"Start New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GyA/GVbJMatFPPzQcvyr6+BHf08=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","Chess","Chessboard","jsxDEV","_jsxDEV","App","_s","game","setGame","position","setPosition","fen","message","setMessage","mode","setMode","difficulty","setDifficulty","isComputerTurn","setIsComputerTurn","handleDrop","sourceSquare","targetSquare","piece","get","color","move","from","to","promotion","isGameOver","isCheckmate","isDraw","turn","error","console","difficultyStr","fetch","method","headers","body","JSON","stringify","then","response","json","data","status","bestMove","slice","aiMove","catch","err","startNewGame","newGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","value","onChange","e","target","parseInt","onDrop","boardWidth","onClick","_c","$RefreshReg$"],"sources":["C:/Users/paint/Desktop/Chess Game/frontend/src/App.js"],"sourcesContent":["// src/App.js\r\nimport React, { useState, useCallback, useEffect } from 'react';\r\nimport { Chess } from 'chess.js'; // Named export from chess.js\r\nimport Chessboard from './components/Chessboard';\r\nimport './index.css';\r\n\r\nfunction App() {\r\n  // Initialize a new chess game.\r\n  const [game, setGame] = useState(new Chess());\r\n  const [position, setPosition] = useState(game.fen());\r\n  const [message, setMessage] = useState('');\r\n  // Mode: \"human\" for human vs. human; \"ai\" for human vs. computer.\r\n  const [mode, setMode] = useState('ai');\r\n  // AI difficulty: easy (5), medium (10), hard (16).\r\n  const [difficulty, setDifficulty] = useState(10);\r\n  // Flag indicating if it's the computer's turn.\r\n  const [isComputerTurn, setIsComputerTurn] = useState(false);\r\n\r\n  // Handler for when a human moves a piece.\r\n  const handleDrop = useCallback((sourceSquare, targetSquare) => {\r\n    try {\r\n      const piece = game.get(sourceSquare);\r\n      if (!piece) {\r\n        setMessage(\"No piece at the selected square. Please try again.\");\r\n        return false;\r\n      }\r\n      // In AI mode, only allow human (White) moves.\r\n      if (mode === 'ai' && piece.color !== 'w') {\r\n        setMessage(\"It's not your turn. Please wait for the computer move.\");\r\n        return false;\r\n      }\r\n      const move = game.move({ from: sourceSquare, to: targetSquare, promotion: 'q' });\r\n      if (move === null) {\r\n        setMessage(\"Invalid move. Please try a different move.\");\r\n        return false;\r\n      }\r\n      // Clear any previous error messages.\r\n      setMessage('');\r\n      setPosition(game.fen());\r\n      \r\n      if (game.isGameOver()) {\r\n        if (game.isCheckmate()) {\r\n          setMessage(\"Checkmate! Game over.\");\r\n        } else if (game.isDraw()) {\r\n          setMessage(\"Draw! Game over.\");\r\n        } else {\r\n          setMessage(\"Game over.\");\r\n        }\r\n      } else if (mode === 'ai' && game.turn() === 'b') {\r\n        setIsComputerTurn(true);\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error in handleDrop:\", error);\r\n      setMessage(\"An error occurred while making your move. Please try again.\");\r\n      return false;\r\n    }\r\n  }, [game, mode]);\r\n  \r\n  // Effect to trigger the computer's move by calling the backend API.\r\n  useEffect(() => {\r\n    if (mode === 'ai' && isComputerTurn && game.turn() === 'b' && !game.isGameOver()) {\r\n      // Map numeric difficulty to a string for the backend.\r\n      let difficultyStr = \"medium\";\r\n      if (difficulty === 5) difficultyStr = \"easy\";\r\n      else if (difficulty === 10) difficultyStr = \"medium\";\r\n      else if (difficulty === 16) difficultyStr = \"hard\";\r\n\r\n      // Use the full URL to ensure we hit the Flask backend on port 5000.\r\n      fetch(\"http://127.0.0.1:5000/api/get_move\", {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          fen: game.fen(),\r\n          difficulty: difficultyStr\r\n        })\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          if (data.status === 'success') {\r\n            const bestMove = data.move; // UCI notation, e.g., \"e7e5\"\r\n            const from = bestMove.slice(0, 2);\r\n            const to = bestMove.slice(2, 4);\r\n            const aiMove = game.move({ from, to, promotion: 'q' });\r\n            if (aiMove === null) {\r\n              setMessage(\"Computer attempted an invalid move.\");\r\n            } else {\r\n              setPosition(game.fen());\r\n            }\r\n          } else {\r\n            setMessage(\"Error: \" + data.message);\r\n          }\r\n          setIsComputerTurn(false);\r\n        })\r\n        .catch(err => {\r\n          console.error(\"API error:\", err);\r\n          setIsComputerTurn(false);\r\n        });\r\n    }\r\n  }, [isComputerTurn, mode, game, difficulty]);\r\n\r\n  // Function to start a new game.\r\n  const startNewGame = () => {\r\n    const newGame = new Chess();\r\n    setGame(newGame);\r\n    setPosition(newGame.fen());\r\n    setMessage('');\r\n    setIsComputerTurn(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Simple Chess App with AI</h1>\r\n      \r\n      {/* Mode Selector */}\r\n      <div style={{ marginBottom: '1rem' }}>\r\n        <label>Mode: </label>\r\n        <select value={mode} onChange={(e) => setMode(e.target.value)}>\r\n          <option value=\"human\">Human vs. Human</option>\r\n          <option value=\"ai\">Human vs. Computer</option>\r\n        </select>\r\n      </div>\r\n      \r\n      {/* Difficulty Selector (only in AI mode) */}\r\n      {mode === 'ai' && (\r\n        <div style={{ marginBottom: '1rem' }}>\r\n          <label>Difficulty: </label>\r\n          <select value={difficulty} onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}>\r\n            <option value={5}>Easy</option>\r\n            <option value={10}>Medium</option>\r\n            <option value={16}>Hard</option>\r\n          </select>\r\n        </div>\r\n      )}\r\n\r\n      {/* Render the Chessboard */}\r\n      <Chessboard position={position} onDrop={handleDrop} boardWidth={400} />\r\n      \r\n      {message && <p>{message}</p>}\r\n      {game.isGameOver() && <button onClick={startNewGame}>Start New Game</button>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}